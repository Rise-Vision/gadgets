<?xml version="1.0" encoding="UTF-8"?>
<Module>
	<ModulePrefs title="Rise Vision Dashboard Registration Activity Gadget" title_url="http://www.risevision.com/help/gadgets/gadget-help-files/rise-vision-dashboard-registration-activity/">
		<Require feature="rpc" />
		<Require feature="setprefs" />
		<Optional feature="rise-api">
			<Param name="reports_ready" />
		</Optional>
	</ModulePrefs>
	<UserPref name="id" display_name="ID" default_value="" datatype="hidden" />
	<UserPref name="rsH" display_name="Container Height" default_value="100%" datatype="hidden" />
	<UserPref name="rsW" display_name="Container Width" default_value="100%" datatype="hidden" />
	<UserPref name="useDefaultKey" display_name="Show data for the Company that the logged in User or authenticated Display belongs to" required="false" default_value="true" datatype="bool" /> 
	<UserPref name="authKey" display_name="Or enter the Authentication Key for the Company you want to show data for" required="false" default_value="" />
	<UserPref name="f_displaysTotal" display_name="Total Displays for the Company" required="false" default_value="false" datatype="bool" /> 
	<UserPref name="f_displaysActive" display_name="Active Displays for the Company" required="false" default_value="false" datatype="bool" /> 
	<UserPref name="f_usersTotal" display_name="Total Users for the Company" required="false" default_value="false" datatype="bool" /> 
	<UserPref name="f_usersActive" display_name="Active Users for the Company" required="false" default_value="false" datatype="bool" /> 
	<UserPref name="f_subCompaniesTotal" display_name="Total Sub-Companies for the Company" required="false" default_value="false" datatype="bool" /> 
	<UserPref name="f_subCompaniesActive" display_name="Active Sub-Companies for the Company" required="false" default_value="false" datatype="bool" /> 
	<UserPref name="f_subDisplaysTotal" display_name="Total Displays for Sub-Companies" required="false" default_value="false" datatype="bool" /> 
	<UserPref name="f_subDisplaysActive" display_name="Active Displays for Sub-Companies" required="false" default_value="false" datatype="bool" /> 
	<UserPref name="f_subUsersTotal" display_name="Total Users for Sub-Companies" required="false" default_value="false" datatype="bool" /> 
	<UserPref name="f_subUsersActive" display_name="Active Users for Sub-Companies" required="false" default_value="false" datatype="bool" /> 
	<UserPref name="f_networkOperatorsTotal" display_name="Network Operators" required="false" default_value="false" datatype="bool" /> 
	<UserPref name="f_retentionRate" display_name="Sub-Company Retention Rate" required="false" default_value="false" datatype="bool" /> 
  	<UserPref name="timeFrame" display_name="Time Frame" default_value="12" datatype="enum" required="false"> 
    	<EnumValue value="12" display_value="Last 12 days"/> 
    	<EnumValue value="84" display_value="Last 12 weeks"/> 
    	<EnumValue value="365" display_value="Last 12 months"/> 
  	</UserPref> 
  	<UserPref name="_dg_fillGraph" display_name="Fill Chart" required="false" default_value="false" datatype="bool" />
  	<UserPref name="_dg_axisLabelFontSize" display_name="Axis Label Size" required="false" default_value="10" datatype="enum">
    	<EnumValue value="8" display_value="8 pixels"/>
        <EnumValue value="10" display_value="10 pixels"/>
        <EnumValue value="12" display_value="12 pixels"/>
        <EnumValue value="14" display_value="14 pixels"/>
        <EnumValue value="16" display_value="16 pixels"/>
        <EnumValue value="18" display_value="18 pixels"/>
        <EnumValue value="20" display_value="20 pixels"/>
        <EnumValue value="22" display_value="22 pixels"/>
        <EnumValue value="24" display_value="24 pixels"/>
        <EnumValue value="26" display_value="26 pixels"/>
        <EnumValue value="28" display_value="28 pixels"/>
        <EnumValue value="30" display_value="30 pixels"/>
        <EnumValue value="32" display_value="32 pixels"/>
        <EnumValue value="34" display_value="34 pixels"/>
        <EnumValue value="36" display_value="36 pixels"/>
        <EnumValue value="38" display_value="38 pixels"/>
        <EnumValue value="40" display_value="40 pixels"/>
    </UserPref>
  	<UserPref name="backColor" display_name="Background Color" required="false" default_value="transparent" /> 
 	<UserPref name="titleText" display_name="Title" required="false" default_value="" /> 
	<UserPref name="title_font-style" display_name="Title Font" datatype="string" default_value=".title_font-style{font-family:Verdana, Verdana, Geneva, sans-serif;color:rgb(0, 0, 0);font-weight:normal;font-size:24px;}" />
  	<UserPref name="_table_query_url" display_name="Data Source URL" required="false" default_value="" datatype="hidden"/>
  	<UserPref name="_table_query_refresh_interval" display_name="Data Refresh Interval (minutes)" default_value="300" datatype="enum" required="false"> 
    	<EnumValue value="0" display_value="Do not refresh"/> 
    	<EnumValue value="60" display_value="1"/> 
    	<EnumValue value="300" display_value="5"/> 
    	<EnumValue value="1800" display_value="30"/> 
    	<EnumValue value="3600" display_value="60"/> 
  	</UserPref>
  	<!-- DO NOT DELETE -->
  	<!--	<UserPref name="serverApp" display_name="Target" required="false" default_value="rvastats" datatype="enum">-->
	<!--	    <EnumValue value="gv-dot-rdncore-test" display_value="Test"/> -->
	<!--    	<EnumValue value="rvastats" display_value="Production"/>-->
	<!--  	</UserPref>-->
	<Content type="html">
    	<![CDATA[
    	<style type="text/css">
	        body {
	        	background-color: transparent;
	        }
	        #contentbox {
		        width: __UP_rsW__;
		        height: __UP_rsH__;
		        position: absolute;
		        display: table;
	        }
	        #titlebox {
		        text-align: center;
		        margin-bottom: 5px;
	        }
			
			__UP_title_font-style__
			
        </style>
    	
    	<!-- Load the Google common loader, that is later used to load the Visualization API. --> 
  		<script src="http://www.google.com/jsapi" type="text/javascript"></script> 
  		<script src="http://dygraphs.com/dygraph-combined.js" type="text/javascript"></script> 
  		<script type="text/javascript" src="http://dygraphs.com/strftime/strftime-min.js"></script> 
 
  		<div id="titlebox" class="title_font-style"></div>
  		<div id="contentbox" style="overflow: auto;"><img src="http://www.google.com/ig/images/spinner.gif" /></div> 
  		
  		<script> 
    		var gadgetHelper = null;
    		var chartFields = ["displaysTotal", "displaysActive", "usersTotal", "usersActive","subCompaniesTotal","subCompaniesActive","subDisplaysTotal","subDisplaysActive","subUsersTotal","subUsersActive","networkOperatorsTotal","retentionRate"];
			var prefs = new gadgets.Prefs(); // User preferences
    		var id = prefs.getString("id") == null ? "" : prefs.getString("id");
    		var serverApp = prefs.getString("serverApp") == null || prefs.getString("serverApp") == "" ? "rvastats" : prefs.getString("serverApp");
    		var defaultKey = null;
    		
    		var backgroundColor = prefs.getString("backColor");
    		if (backgroundColor !== null && backgroundColor != "") {
            	document.body.style.background = backgroundColor;
            }
 
 			gadgets.util.registerOnLoadHandler(loadVisualizationAPI);
 			
 
    		/*  Load the Google Visualization API  */
    		function loadVisualizationAPI() {
    		
      			google.load("visualization", "1");
      			
      			if (prefs.getBool("useDefaultKey")) {
    		
	    			// get the key from Viewer
	    			google.setOnLoadCallback(requestKey);
	    		
	    		} else {
	
	    			// go straight to requesting the data 
	    			google.setOnLoadCallback(sendQuery);
	    		} 
    		}
    		
    		//  request default key from Viewer 
    		function requestKey() {
    			
    			console.info('requestKey id=' + id);
    			
    	        if (id != null && id != "") {

					gadgets.rpc.register("rsparam_set_" + id, receiveKey);
					gadgets.rpc.call('', 'rsparam_get', null, id, "CompanyAuthKey");

		        } else {
		        
		        	var tableDiv = _gel('contentbox');
                    tableDiv.innerHTML = "Unable to communicate with Viewer (ID is not defined).";
		        }
    		}
    		
    		// callback for receiving the default key from Viewer  
    		function receiveKey(name, value) {
            	
            	console.info('receiveKey id=' + id + " name=" + name + " value=" + value);

            	if (name=='CompanyAuthKey') {
            		defaultKey = value;
            		sendQuery();
            	}
            }
 
    		/**
     		* Create a query from the user prefs, and then send it to the data source.
     		* This method is called once the visualization API is fully loaded.
     		* Note that in the last line, a callback function is specified to be
     		* called once the response is received from the data source.
     		*/
    		function sendQuery() {
      			var chartTitle = _gel('titlebox');
      			var chartDiv = _gel('contentbox');
      			var totalHeight = prefs.getInt("rsH") != null && prefs.getInt("rsH") > 0 && prefs.getString("rsH").indexOf('%') == -1 ? prefs.getInt("rsH") : document.body.clientHeight;
      			var totalWidth = prefs.getInt("rsW") != null && prefs.getInt("rsW") > 0 && prefs.getString("rsW").indexOf('%') == -1 ? prefs.getInt("rsW") : document.body.clientWidth;
      			
      			if (prefs.getString("titleText") != null && prefs.getString("titleText") != '') {
      				
      				chartTitle.innerHTML = prefs.getString("titleText");
      				var chartHeight = totalHeight - (chartTitle.clientHeight + 5);
      				chartDiv.style.height = chartHeight + 'px';

      			} else {
      			
      				chartTitle.style.display = 'none';
      				chartDiv.style.height = totalHeight + 'px';
      			}
      			
      			chartDiv.style.width = totalWidth + 'px';
      			
      			var selectedFields = new Array();
      			var idx = 0;
      			
      			for (i in chartFields){
      				if (prefs.getBool('f_'+chartFields[i])) {
      					selectedFields[idx] = chartFields[i];
      					idx++;
      				}
      			}
      			
      			chart = new DateGraph.GVizChart(chartDiv);

				var usedKey = prefs.getBool('useDefaultKey') ? defaultKey : prefs.getString('authKey');
      			usedKey = (usedKey == null || usedKey == '') ? 'no-key' : usedKey; 
				
 				var srvUrl = 'https://' + serverApp + '.appspot.com/v1/gv/' + usedKey + '/statistics?tq=select%20updateDate' + (idx > 0 ? ','+selectedFields.join(','):'') + '%20order%20by%20updateDate%20desc%20limit%20' + prefs.getString("timeFrame");
				//prefs.set('_table_query_url', srvUrl);
				
      			gadgetHelper = new google.visualization.GadgetHelper();
      			//var query = gadgetHelper.createQueryFromPrefs(prefs);
      			var query = new google.visualization.Query(srvUrl);
      			query.setRefreshInterval(prefs.getInt("_table_query_refresh_interval"));
      			query.send(handleQueryResponse);
    		}
 
    		/**
     		* Query response handler function.
     		* Called by the Google Visualization API once the response is received.
		  	* Takes the query response and formats it as a table.
		    */
    		function handleQueryResponse(response) {
      		
	      		// Use the visualization GadgetHelper class to validate the data, and for error handling.
	      		if (!gadgetHelper.validateResponse(response)) {
	        		// Default error handling was done, just leave.
	        		var chartdiv = _gel('contentbox');
                    chartdiv.innerHTML = "Error receiving data from the data source.";
	        		return;

	      		};
	      
	      		var data = response.getDataTable();
 	      		
	      		var prefs = new gadgets.Prefs(); // User preferences
	      		var fillGraph = prefs.getBool("_dg_fillGraph");
	      		var axisLabelFontSize = prefs.getInt("_dg_axisLabelFontSize");
			    var opts = {
			    	showRoller: false,
			        rollPeriod: 1,
			        labelsKMB: false,
			        errorBars: false,
			        fillGraph: fillGraph,
			        axisLabelFontSize: axisLabelFontSize,
			        labelsDivStyles: {'font-size': axisLabelFontSize + 'px' },
			        xAxisLabelFormatter: function(date, granularity) {
                   if (granularity >= Dygraph.DECADAL) {
                     return date.strftime('%Y');
                   } else if (granularity >= Dygraph.MONTHLY) {
                     return date.strftime('%b-%y');
                   } else {
						    var frac = date.getHours() * 3600 + date.getMinutes() * 60 + date.getSeconds() + date.getMilliseconds();
						    if (frac == 0 || granularity >= Dygraph.DAILY) {
						      return new Date(date.getTime() + 3600*1000).strftime('%d-%b');
						    } else {
						      return Dygraph.hmsString_(date.getTime());
						    } 
                	}
                 }
			    };
	 
	      		chart.draw(data, opts);
	      		readyEvent();
    		};
    		
    		//Send "READY" event to the Viewer.
            function readyEvent() {
            	gadgets.rpc.call('', 'rsevent_ready', null, id, false, false, false, true, false);
            }
            
                                                
            function _gel(id) {
            	return document.getElementById(id);
            }
		</script>
        ]]>
	</Content>
</Module>